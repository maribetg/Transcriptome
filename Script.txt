*Trinity
#De novo assembly
./Trinity  --seqType fq --max_memory 50G --left FRNA0029_1.fq,FRNA0030_1.fq --right FRNA0029_2.fq,FRNA0030_2.fq --CPU 6 --SS_lib_type FR --min_contig_length 50 --no_cleanup --group_pairs_distance 100 --KMER_SIZE 21 --output trinitygif1
#count the number of transcripts
grep '>' trinity_sap/Trinity.fasta | wc -l
#statistical fo the output
perl ./trinityrnaseq-Trinity-v2.8.2/util/TrinityStats.pl TRINITY\ PERSITE\ PER\ SPECIES/Trinity_Gifu\ each\ species/trinitygif1/Trinity.fasta
#create an additional file
cp Trinity.fasta transcriptome.fa
#Creating the tx2gene file for each specie per site
Gifu sp1
perl ./trinityrnaseq-Trinity-v2.8.2/util/support_scripts/get_Trinity_gene_to_trans_map.pl TRINITY\ PERSITE\ PER\ SPECIES/Trinity_Gifu\ each\ species/trinitygif1/gsp1.fa > gene2tx.tsv
awk 'BEGIN{print "TXNAME,GENEID"} ' > tx2gene.csv
awk -F $'\t' ' { t =$1; $1 = $S2; $S2 = t; print; } ' OFS=$',' gene2tx.tsv >> tx2gene.csv


*Quantification of files from salmon in R
library(tximport)
library(readr)

#creating a file
files <- file.path("./",list.dirs(recursive = FALSE), "quant.sf")
names(files) <- gsub("./", "", list.dirs(recursive = FALSE))
all(file.exists(files))

#open the file with the name of the transcripts
tx2gene <- read.csv("tx2gene01.csv")
#import the salmon output files
txi <-tximport(files, type = "salmon", tx2gene = tx2gene)


#Gene expression differences among species at each sampling site
library(edgeR)
library(limma)
library(ggplots2)
library(RColorBrewer)
library(dplyr)
library(forcats)
library(hrbrthemes)
library(viridis)
library(gplots)

## al data
seqdata <- read.delim("all.txt", stringsAsFactors = FALSE) #Import the file of counts
seqdata[is.nan(seqdata)]=0 #change na to zero
info <- read.delim("info.txt") #import file of information
datannames = seqdata #copy counts in a file
datannames$name <- NULL #remove first column of names
rownames(datannames) <- seqdata[,1] #identify the names of the genes at the table
abs(datannames) #retain aboslute numbers and remove negative values
cpm <- cpm(datannames) #filter low expressed reads
Norm <- calcNormFactors (datannames, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
dege <- DGEList(datannames) #create DGE object for downstream analysis
norm_dege <- calcNormFactors(dege, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
log <- cpm(dege, log=TRUE) #obtained the log transformed data
var_genes <- apply(log, 1, var) #variance of each row (genes)
mypalette <- brewer.pal(11,"RdYlBu") #colours for heatmap
morecols <- colorRampPalette(mypalette) #colours assembly for heatmap
col.loc <- c("purple", "orange", "green", "blue")[info$Locality] #colours for locality
col.genes <- c("purple", "orange", "green", "blue")[info$Name] #colours for genes
heatmap(log, col=rev(morecols(50)), trace="none", ColSideColors = col.loc, scale = "row") #heatmap

#correlacion with environmental factors to all data
#if we want to make correlations with environmental factors (https://ucdavis-bioinformatics-training.github.io/2018-June-RNA-Seq-Workshop/thursday/DE.html)
library(limma)
d0 <- calcNormFactors(dege)
dim(d0)
env <-read.delim("info.txt", stringsAsFactors = FALSE) #Import the file of environmental data

#Precipitation
mm_Pre <- model.matrix(~info$Precipitacion) #each environmental factors
y <- voom(d0, mm_Pre, plot = F) #calculation of variance weights with environmental
fit_Pre <- lmFit(y, mm_Pre) #linear fit models in limma
tmp_Pre <- contrasts.fit(fit_Pre, coef = 2) # test "pH" coefficient
tmp_Pre <- eBayes(tmp_Pre)
top.table_Pre <- topTable(tmp_Pre, sort.by = "P", n = Inf)
head(top.table_Pre, 20)
length(which(top.table_Pre$adj.P.Val < 0.05))

#In this case, limma is fitting a linear regression model, which here is a straight line fit, with the slope and intercept defined by the model coefficients:
DN413 <- y$E["DN413",]
plot(DN413 ~ info$Precipitacion, ylim = c(0, 3.5))
intercept <- coef(fit)["DN413", "(Intercept)"]
slope <- coef(fit)["DN413", "precipitation"]
abline(a = intercept, b = slope)

DN227 <- y$E["DN227",]
plot(DN227 ~ info$Precipitacion, ylim = c(0, 3.5))
intercept <- coef(fit)["DN413", "(Intercept)"]

#Altitude
mm_Alt <- model.matrix(~info$Altitude) #each environmental factors
y_Alt <- voom(d0, mm_Alt, plot = F) #calculation of variance weights with environmental
fit_Alt <- lmFit(y_Alt, mm_Alt) #linear fit models in limma
tmp_Alt <- contrasts.fit(fit_Alt, coef = 2) # test coefficient
tmp_Alt <- eBayes(tmp_Alt)
top.table_Alt <- topTable(tmp_Alt, sort.by = "P", n = Inf)
head(top.table_Alt, 20)
length(which(top.table_Alt$adj.P.Val < 0.05))

DN353 <- y_Alt$E["DN353",]
plot(DN353 ~ info$Altitude, ylim = c(0, 3.5))

DN139_01 <- y_Alt$E["DN139-01",]
plot(DN139_01 ~ info$Altitude, ylim = c(0, 3.5))

DN238 <- y_Alt$E["DN238",]
plot(DN238 ~ info$Altitude, ylim = c(0, 3.5))

#Waterlevel
mm_Wl <- model.matrix(~info$Waterlevel) #each environmental factors
y_Wl <- voom(d0, mm_Wl, plot = F) #calculation of variance weights with environmental
fit_Wl <- lmFit(y_Wl, mm_Wl) #linear fit models in limma
tmp_Wl <- contrasts.fit(fit_Wl, coef = 2) # test coefficient
tmp_Wl <- eBayes(tmp_Wl)
top.table_Wl <- topTable(tmp_Wl, sort.by = "P", n = Inf)
head(top.table_Wl, 20)
length(which(top.table_Wl$adj.P.Val < 0.05))

DN413 <- y_Wl$E["DN413",]
plot(DN413 ~ info$Waterlevel, ylim = c(0, 3.5))

DN296 <- y_Wl$E["DN296",]
plot(DN296 ~ info$Waterlevel, ylim = c(0, 3.5))

DN311 <- y_Wl$E["DN311",]
plot(DN311 ~ info$Waterlevel, ylim = c(0, 3.5))

DN58 <- y_Wl$E["DN58",]
plot(DN58 ~ info$Waterlevel, ylim = c(0, 3.5))

DN186 <- y_Wl$E["DN186",]
plot(DN186 ~ info$Waterlevel, ylim = c(0, 3.5))

DN318 <- y_Wl$E["DN318",]
plot(DN318 ~ info$Waterlevel, ylim = c(0, 3.5))

#Flowrate
mm_FR <- model.matrix(~info$Flowrate) #each environmental factors
y_FR <- voom(d0, mm_FR, plot = F) #calculation of variance weights with environmental
fit_FR <- lmFit(y_FR, mm_FR) #linear fit models in limma
tmp_FR <- contrasts.fit(fit_FR, coef = 2) # test coefficient
tmp_FR <- eBayes(tmp_FR)
top.table_FR <- topTable(tmp_FR, sort.by = "P", n = Inf)
head(top.table_FR, 20)
length(which(top.table_FR$adj.P.Val < 0.05))

DN296 <- y_FR$E["DN296",]
plot(DN296 ~ info$Flowrate, ylim = c(0, 3.5))

#Deepsnow
mm_DS <- model.matrix(~info$Deepsnow) #each environmental factors
y_DS <- voom(d0, mm_DS, plot = F) #calculation of variance weights with environmental
fit_DS <- lmFit(y_DS, mm_DS) #linear fit models in limma
tmp_DS <- contrasts.fit(fit_DS, coef = 2) # test coefficient
tmp_DS <- eBayes(tmp_DS)
top.table_DS <- topTable(tmp_DS, sort.by = "P", n = Inf)
head(top.table_DS, 20)
length(which(top.table_DS$adj.P.Val < 0.05))

DN139_01_DS <- y_DS$E["DN139-01",]
plot(DN139_01_DS ~ info$Deepsnow, ylim = c(0, 3.5))

DN232 <- y_DS$E["DN232",]
plot(DN232 ~ info$Deepsnow, ylim = c(0, 3.5))

DN58 <- y_DS$E["DN58",]
plot(DN58 ~ info$Deepsnow, ylim = c(0, 3.5))

DN62 <- y_DS$E["DN62",]
plot(DN62 ~ info$Deepsnow, ylim = c(0, 3.5))

DN317 <- y_DS$E["DN317",]
plot(DN317 ~ info$Deepsnow, ylim = c(0, 3.5))

DN150 <- y_DS$E["DN150",]
plot(DN150 ~ info$Deepsnow, ylim = c(0, 3.5))

DN113 <- y_DS$E["DN113",]
plot(DN113 ~ info$Deepsnow, ylim = c(0, 3.5))

DN269 <- y_DS$E["DN269",]
plot(DN269 ~ info$Deepsnow, ylim = c(0, 3.5))

DN266 <- y_DS$E["DN266",]
plot(DN266 ~ info$Deepsnow, ylim = c(0, 3.5))

DN333 <- y_DS$E["DN333",]
plot(DN333 ~ info$Deepsnow, ylim = c(0, 3.5))

DN429 <- y_DS$E["DN429",]
plot(DN429 ~ info$Deepsnow, ylim = c(0, 3.5))

DN63 <- y_DS$E["DN63",]
plot(DN63 ~ info$Deepsnow, ylim = c(0, 3.5))

#Watertemp
mm_WT <- model.matrix(~info$Watertemp) #each environmental factors
y_WT <- voom(d0, mm_WT, plot = F) #calculation of variance weights with environmental
fit_WT <- lmFit(y_WT, mm_WT) #linear fit models in limma
tmp_WT <- contrasts.fit(fit_WT, coef = 2) # test coefficient
tmp_WT <- eBayes(tmp_WT)
top.table_WT <- topTable(tmp_WT, sort.by = "P", n = Inf)
head(top.table_WT, 20)
length(which(top.table_WT$adj.P.Val < 0.05))

DN139_01_WT <- y_WT$E["DN139-01",]
plot(DN139_01_WT ~ info$Watertemp, ylim = c(0, 3.5))

DN232_WT <- y_WT$E["DN232",]
plot(DN232_WT ~ info$Watertemp, ylim = c(0, 3.5))

DN63_WT <- y_WT$E["DN63",]
plot(DN63_WT ~ info$Watertemp, ylim = c(0, 3.5))

DN65_WT <- y_WT$E["DN65",]
plot(DN65_WT ~ info$Watertemp, ylim = c(0, 3.5))

DN138_WT <- y_WT$E["DN138",]
plot(DN138_WT ~ info$Watertemp, ylim = c(0, 3.5))

#Airtemp
mm_AT <- model.matrix(~info$Airtemp) #each environmental factors
y_AT <- voom(d0, mm_AT, plot = F) #calculation of variance weights with environmental
fit_AT <- lmFit(y_AT, mm_AT) #linear fit models in limma
tmp_AT <- contrasts.fit(fit_AT, coef = 2) # test coefficient
tmp_AT <- eBayes(tmp_AT)
top.table_AT <- topTable(tmp_AT, sort.by = "P", n = Inf)
head(top.table_AT, 20)
length(which(top.table_AT$adj.P.Val < 0.05))

DN311_AT <- y_AT$E["DN311",]
plot(DN311_AT ~ info$Airtemp, ylim = c(0, 3.5))

DN57_AT <- y_AT$E["DN57",]
plot(DN57_AT ~ info$Airtemp, ylim = c(0, 3.5))

DN396_AT <- y_AT$E["DN396",]
plot(DN396_AT ~ info$Airtemp, ylim = c(0, 3.5))

DN173_AT <- y_AT$E["DN173",]
plot(DN173_AT ~ info$Airtemp, ylim = c(0, 3.5))

## selected 14 genes
genes14 <- read.delim("genes14.txt", stringsAsFactors = FALSE) #Import the file of 14 genes selected
datagenes14 = genes14 #copy counts in a file
datagenes14$name <- NULL #remove first column of names
rownames(datagenes14) <- genes14[,1] #identify the names of the genes at the table
degegenes14 <- DGEList(datagenes14) #create DGE object for downstream analysis
normgenes14 <- calcNormFactors (degegenes14, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
loggenes14 <- cpm(normgenes14, log=TRUE) #obtained the log transformed data
heatmap.2(loggenes14, trace= "none", col=rev(morecols(50)), ColSideColors = col.loc, scale = "column") #heatmap
data= data.frame(loggnes14) #convert the file in table
data = as.data.frame(t(data)) #change column for row and vice
write.table(data, "log-genes14.txt") #write the output in a table
dataloggnes14 <- read.delim("loggenes14-trans.txt", stringsAsFactors = FALSE) #transform data of log for the 14 genes
dataloggnes14 %>% mutate(Gene = fct_reorder(Gene, Log)) %>% mutate(Gene = factor(Gene, levels= c(dataloggnes14$Gene))) %>% ggplot(aes(fill=Site, y=Log, x=Gene)) + geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") + scale_fill_viridis(discrete=T, name="")+ theme_ipsum()+ xlab("") + ylab("Log2") + ylim(0,40)
loggenes14.t <- t(loggenes14) #change row for columns
dist.genes14 = vegdist(loggenes14.t, method = "bray") #pairwise comparison
genes14.pco <- cmdscale(dist.genes14, eig= TRUE) #pco
plot(genes14.pco$points, asp=1, xlab="PCO1", ylab="PCO2")
text(genes14.pco$points, labels = rownames(genes14.pco$points))

##Selected 22 genes PCO
genes22 <- read.csv("22genes.csv", row.names=1, header=TRUE)
dist.genes22 = vegdist(genes22, method = "bray") #pairwise comparison
genes22.pco <- cmdscale(dist.genes22, eig= TRUE) #pco
plot(genes22.pco$points, asp=1, xlab="PC1(33.1%)", ylab="PC2(26.5%)", pch = 16)
text(genes22.pco$points, labels = rownames(genes22.pco$points)) #add the name to the plot instead of points
genes17 <- read.delim("genes17.txt", stringsAsFactors = FALSE) #import the file of 17 functional genes
datagenes17 = genes17 #copy counts in a file
datagenes17$Name <- NULL #remove first column of names
rownames(datagenes17) <- genes17[,1] #identify the names of the genes at the table
degegenes17 <- DGEList(datagenes17) #create DGE object for downstream analysis
normgenes17 <- calcNormFactors (degegenes17, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
loggenes17 <- cpm(normgenes17, log=TRUE) #obtained the log transformed data
col.genes.genes17 <- c("red", "blue", "green", "purple")[genes17$Name] #colours for locality
heatmap.2(loggenes17, trace="none", col=rev(morecols(50)), ColSideColors = col.genes.genes17, scale = "row", Colv = FALSE, dendrogram = "row") #heatmap


###per locality
##Matsuyama
mat <- read.delim("matsuyama.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datamat = mat #copy counts in a file
datamat$Name <- NULL #remove first column of names
rownames(datamat) <- mat[,1] #identify the names of the genes at the table
degemat <- DGEList(datamat) #create DGE object for downstream analysis
normmat <- calcNormFactors (degemat, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logmat <- cpm(normmat, log=TRUE) #obtained the log transformed data
col.genes.mat <- c("purple", "orange", "green", "blue")[mat$Name] #colours for locality
heatmap.2(logmat, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

##Gifu
gifu <- read.delim("gifu.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datagifu = gifu #copy counts in a file
datagifu$Name <- NULL #remove first column of names
rownames(datagifu) <- gifu[,1] #identify the names of the genes at the table
degegifu <- DGEList(datagifu) #create DGE object for downstream analysis
normgifu <- calcNormFactors (degegifu, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
loggifu <- cpm(normgifu, log=TRUE) #obtained the log transformed data
col.genes.gifu <- c("purple", "orange", "green", "blue")[gifu$Name] #colours for locality
heatmap.2(loggifu, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

##Sendai
send <- read.delim("sendai.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datasend = send #copy counts in a file
datasend$Name <- NULL #remove first column of names
rownames(datasend) <- send[,1] #identify the names of the genes at the table
degesend <- DGEList(datasend) #create DGE object for downstream analysis
normsend <- calcNormFactors (degesend, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logsend <- cpm(normsend, log=TRUE) #obtained the log transformed data
col.genes.send <- c("purple", "orange", "green", "blue")[send$Name] #colours for locality
heatmap.2(logsend, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

##Sapporo
sapp <- read.delim("sapporo.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datasapp = sapp #copy counts in a file
datasapp$Name <- NULL #remove first column of names
rownames(datasapp) <- sapp[,1] #identify the names of the genes at the table
degesapp <- DGEList(datasapp) #create DGE object for downstream analysis
normsapp <- calcNormFactors (degesapp, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logsapp <- cpm(normsapp, log=TRUE) #obtained the log transformed data
col.genes.sapp <- c("purple", "orange", "green", "blue")[sapp$Name] #colours for locality
heatmap.2(logsapp, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

###per species
##Haploperla
haploperla <- read.delim("haploperla.txt", stringsAsFactors = FALSE) #import the file 
datahaplo = haploperla #copy counts in a file
datahaplo$Name <- NULL #remove first column of names
rownames(datahaplo) <- haploperla[,1] #identify the names of the genes at the table
degehaplo <- DGEList(datahaplo) #create DGE object for downstream analysis
normhaplo <- calcNormFactors (degehaplo, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
loghaplo <- cpm(normhaplo, log=TRUE) #obtained the log transformed data
col.genes.haplo <- c("purple", "orange", "green", "blue")[haploperla$Name] #colours for locality
heatmap.2(loghaplo, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

##Nemoura
nemoura <- read.delim("nemoura.txt", stringsAsFactors = FALSE) #import the file 
datanemo = nemoura #copy counts in a file
datanemo$Name <- NULL #remove first column of names
rownames(datanemo) <- nemoura[,1] #identify the names of the genes at the table
degenemo <- DGEList(datanemo) #create DGE object for downstream analysis
normnemo <- calcNormFactors (degenemo, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
lognemo <- cpm(normnemo, log=TRUE) #obtained the log transformed data
heatmap.2(lognemo, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

##Stavsolus
stavsolus <- read.delim("stavsolus.txt", stringsAsFactors = FALSE) #import the file 
datastav = stavsolus #copy counts in a file
datastav$Name <- NULL #remove first column of names
rownames(datastav) <- stavsolus[,1] #identify the names of the genes at the table
degestav <- DGEList(datastav) #create DGE object for downstream analysis
norstav <- calcNormFactors (degestav, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logstav <- cpm(norstav, log=TRUE) #obtained the log transformed data
heatmap.2(logstav, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

##Rhabiopteryx
rhabiopteryx <- read.delim("rhabiopteryx.txt", stringsAsFactors = FALSE) #import the file 
datarhab = rhabiopteryx #copy counts in a file
datarhab$Name <- NULL #remove first column of names
rownames(datarhab) <- rhabiopteryx[,1] #identify the names of the genes at the table
degerhab <- DGEList(datarhab) #create DGE object for downstream analysis
normrhab <- calcNormFactors (degerhab, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logrhab <- cpm(normrhab, log=TRUE) #obtained the log transformed data
heatmap.2(logrhab, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

##Amphinemoura
amphinemoura <- read.delim("amphinemoura.txt", stringsAsFactors = FALSE) #import the file 
dataamph = amphinemoura #copy counts in a file
dataamph$Name <- NULL #remove first column of names
rownames(dataamph) <- amphinemoura[,1] #identify the names of the genes at the table
degeamph <- DGEList(dataamph) #create DGE object for downstream analysis
normamph <- calcNormFactors (degeamph, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logamph <- cpm(normamph, log=TRUE) #obtained the log transformed data
heatmap.2(logamph, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

##perlodini
perlodini <- read.delim("perlodini.txt", stringsAsFactors = FALSE) #import the file 
dataperlo = perlodini #copy counts in a file
dataperlo$Name <- NULL #remove first column of names
rownames(dataperlo) <- perlodini[,1] #identify the names of the genes at the table
degeperlo <- DGEList(dataperlo) #create DGE object for downstream analysis
normperlo <- calcNormFactors (degeperlo, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logperlo <- cpm(normperlo, log=TRUE) #obtained the log transformed data
heatmap.2(logperlo, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

##Eucanopsis
eucanopsis <- read.delim("eucanopsis.txt", stringsAsFactors = FALSE) #import the file 
dataeucan = eucanopsis #copy counts in a file
dataeucan$Name <- NULL #remove first column of names
rownames(dataeucan) <- eucanopsis[,1] #identify the names of the genes at the table
degeeucan <- DGEList(dataeucan) #create DGE object for downstream analysis
normeucan <- calcNormFactors (degeeucan, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logeucan <- cpm(normeucan, log=TRUE) #obtained the log transformed data
heatmap.2(logeucan, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap keeping the column order position and ordering based on rows

###New data for salmon-per locality
##Matsuyama
mat01 <- read.delim("matsuyama01.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datamat01 = mat01 #copy counts in a file
datamat01$Name <- NULL #remove first column of names
rownames(datamat01) <- mat01[,1] #identify the names of the genes at the table
degemat01 <- DGEList(datamat01) #create DGE object for downstream analysis
normmat01 <- calcNormFactors (degemat01, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logmat01 <- cpm(normmat01, log=TRUE) #obtained the log transformed data
heatmap.2(logmat01, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

##Gifu
gifu01 <- read.delim("gifu01.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datagifu01 = gifu01 #copy counts in a file
datagifu01$Name <- NULL #remove first column of names
rownames(datagifu01) <- gifu01[,1] #identify the names of the genes at the table
degegifu01 <- DGEList(datagifu01) #create DGE object for downstream analysis
normgifu01 <- calcNormFactors (degegifu01, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
loggifu01 <- cpm(normgifu01, log=TRUE) #obtained the log transformed data
heatmap.2(loggifu01, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

##Sendai
send01 <- read.delim("sendai01.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datasend01 = send01 #copy counts in a file
datasend01$Name <- NULL #remove first column of names
rownames(datasend01) <- send01[,1] #identify the names of the genes at the table
degesend01 <- DGEList(datasend01) #create DGE object for downstream analysis
normsend01 <- calcNormFactors (degesend01, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logsend01 <- cpm(normsend01, log=TRUE) #obtained the log transformed data
heatmap.2(logsend01, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

##Sapporo
sapp01 <- read.delim("sapporo01.txt", stringsAsFactors = FALSE) #import the file of all species from matsuyama
datasapp01 = sapp01 #copy counts in a file
datasapp01$Name <- NULL #remove first column of names
rownames(datasapp01) <- sapp01[,1] #identify the names of the genes at the table
degesapp01 <- DGEList(datasapp01) #create DGE object for downstream analysis
normsapp01 <- calcNormFactors (degesapp01, method = c("TMM"), refcolumn =TRUE) #Normalization methods to scale the raw library sizes
logsapp01 <- cpm(normsapp01, log=TRUE) #obtained the log transformed data
heatmap.2(logsapp01, trace="none", col=rev(morecols(50)), scale = "row", Colv = FALSE, dendrogram = "row") #heatmap

#Gene expression diversity
library(vegan)
library(codyn)
diversity(logsapp, MARGIN = 2, index = "simpson") #Calculate the alpha diversity of the sample. Margin rotate the table to species
diversity(logmat, MARGIN = 2, index = "simpson")
diversity(loggifu, MARGIN = 2, index = "simpson")
diversity(logsend, MARGIN = 2, index = "simpson")
diversity(logsapp, MARGIN = 2, index = "invsimpson") #Calculate the alpha diversity of the sample using invsimpson, all genes were equaly abundant. Margin rotate the table to species
diversity(logmat, MARGIN = 2, index = "invsimpson")
diversity(loggifu, MARGIN = 2, index = "invsimpson")
diversity(logsend, MARGIN = 2, index = "invsimpson")

logsappcodyn = read.csv("logsapp.csv")
codynturnover <- turnover(df = logsappcodyn, species.var = "species", time.var = "year", abundance.var = "abundance") #Calculate total turnover
codynturnover <- turnover(df = logsappcodyn, species.var = "species", time.var = "year", abundance.var = "abundance", metric = "appearance") #Calculate appearance


#Gene co-expression analysis
library(WGCNA)
options(stringsAsFactors = FALSE)
WGCNAexpression = read.csv("WGCNA-expression.csv") #file of expression data
WGCNAexpression01 = WGCNAexpression #copy counts in a file
WGCNAexpression01$Name <- NULL #remove first column of names
rownames(WGCNAexpression01) <- WGCNAexpression[,1]
WGCNAdata = read.csv("WGCNA-data.csv") #file of sites
WGCNAdata01 = WGCNAdata #copy counts in a file
WGCNAdata01$Name <- NULL #remove first column of names
rownames(WGCNAdata01) <- WGCNAdata[,1]
save(WGCNAexpression01, WGCNAdata01, file = "WGCNA-input.RData") #save the files for the program
WGCNA = load(file = "WGCNA-input.RData") #load the file to R environment
powers = c(c(1:10), seq(from= 12, to=20, by=2)) #power analysis
sft = pickSoftThreshold(WGCNAexpression01, powerVector = powers, verbose = 5, networkType = "signed") #network topology function
# Plot the results:
sizeGrWindow(9, 5)
par(mfrow = c(1,2)); cex1 = 0.9; plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n", main = paste("Scale independence")); text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2], labels=powers,cex=cex1,col="red"); abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding. We found power 10
plot(sft$fitIndices[,1], sft$fitIndices[,5], xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n", main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
#Network construction
net = blockwiseModules(WGCNAexpression01, power = 10, TOMType = "signed", minModuleSize = 10, reassignThreshold = 0, mergeCutHeight = 0.015, numericLabels = TRUE, pamRespectsDendro = FALSE, saveTOMs = TRUE, saveTOMFileBase = "WGCNATOM", verbose = 3)
#Label the network
mergedColors = labels2colors(net$colors)
#plot
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]], "Module colors", dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)
#Save
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
MEs = net$MEs; geneTree = net$dendrograms[[1]]; save(MEs, moduleLabels, moduleColors, geneTree,file = "WGCNA-networkConstruction.RData")
#Load data
lnames = load(file = "WGCNA-input.RData")
lnames = load(file = "WGCNA-networkConstruction.RData")
#Define number of genes and samples
nGenes = ncol(WGCNAexpression01)
nSamples = nrow(WGCNAexpression01)
#Recalculate MEs with color labels
MEs0 = moduleEigengenes(WGCNAexpression01, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, WGCNAdata01, use = "all.obs")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
sizeGrWindow(10,6)
#Display correlations and p-values
textMatrix = paste(signif(moduleTraitCor, 2), "\n(", signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor, xLabels = names(WGCNAdata01), yLabels = names(MEs), ySymbols = names(MEs),colorLabels = FALSE, colors = blueWhiteRed(50), textMatrix = textMatrix, setStdMargins = FALSE, cex.text = 0.5, zlim = c(-1,1), colorMatrix = NULL)
